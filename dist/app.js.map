{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@opentelemetry/api\"","webpack:///external \"shortid\"","webpack:///external \"countly-sdk-nodejs\"","webpack:///external \"@slack/web-api\"","webpack:///external \"lodash/isObject\"","webpack:///external \"express\"","webpack:///external \"util\"","webpack:///external \"@opentelemetry/tracing\"","webpack:///external \"body-parser\"","webpack:///external \"lodash/map\"","webpack:///external \"@opentelemetry/exporter-jaeger\"","webpack:///external \"sqlite3\"","webpack:///external \"sqlite\"","webpack:///external \"redis\"","webpack:///external \"express-handlebars\"","webpack:///external \"async_hooks\"","webpack:///external \"lodash/isString\"","webpack:///external \"lodash/uniqBy\"","webpack:///external \"lodash/chunk\"","webpack:///external \"lodash/groupBy\"","webpack:///external \"lodash/isEmpty\"","webpack:///external \"lodash/uniq\"","webpack:///external \"lodash/find\"","webpack:///external \"dotenv\"","webpack:///./src/lib/logger.ts","webpack:///./src/lib/sqlite.ts","webpack:///./src/lib/redis.ts","webpack:///./src/lib/trace-decorator.ts","webpack:///./src/team/team-model.ts","webpack:///./src/lib/to.ts","webpack:///./src/routes/oauth.ts","webpack:///./src/lib/string-match-all.ts","webpack:///./src/session/session-model.ts","webpack:///./src/session/session-controller.ts","webpack:///./src/routes/pp-command.ts","webpack:///./src/routes/action.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","info","message","args","Date","toISOString","forEach","arg","JSON","stringify","console","log","warn","error","getSingleton","asyncLocalStorage","Trace","options","target","propertyName","propertyDesciptor","originalMethod","spanName","tracer","getTracer","ctx","getStore","spanOptions","parent","span","startSpan","rv","run","apply","this","then","catch","val","end","err","addEvent","event","stack","setStatus","code","UNKNOWN","getSpan","ChannelSettingKey","TeamStore","id","setAttribute","access_token","scope","user_id","setAttributes","db","$id","$name","$access_token","$scope","$user_id","findById","update","teamId","channelId","settingRows","all","$teamId","$channelId","row","setting_key","setting_value","settings","tasks","keys","map","settingKey","upsertSetting","Promise","$settingKey","$settingValue","customPoints","customPointsArr","match","join","$customPoints","to","promise","undefined","req","res","query","status","send","slackWebClient","oauthErr","accessResponse","oauth","v2","access","client_id","process","env","SLACK_CLIENT_ID","client_secret","SLACK_CLIENT_SECRET","errorId","ISSUES_LINK","upsertErr","team","upsert","authed_user","COUNTLY_APP_KEY","add_event","count","segmentation","render","layout","data","SLACK_APP_ID","TEAM_NAME","matchAll","str","regex","global","exec","push","SessionStore","client","getAsync","rawSession","buildRedisKey","parse","session","setAsync","set","Number","SESSION_TTL","delAsync","del","sessionId","REDIS_NAMESPACE","DEFAULT_POINTS","SessionControllerErrorCode","SessionController","votesText","participants","sort","userId","chat","postMessage","channel","text","title","attachments","buildMessageAttachments","triggerId","points","isProtected","protectedCheckboxesOption","type","emoji","views","open","trigger_id","view","callback_id","private_metadata","submit","close","blocks","block_id","element","placeholder","initial_value","label","initial_users","hint","optional","initial_options","state","updateMessage","delete","point","Error","SESSION_NOT_ACTIVE","indexOf","ONLY_PARTICIPANTS_CAN_VOTE","votes","length","voteGroups","peopleText","userIds","ts","rawPostMessageResponse","allMentions","split","includes","replace","mention","trim","fallback","color","attachment_type","actions","style","PPCommandRoute","cmd","body","token","SLACK_VERIFICATION_TOKEN","json","response_type","replace_original","help","configure","openNewSessionModal","team_id","teamDomain","team_domain","channel_id","channelName","channel_name","userName","user_name","teamGetErr","INTERNAL","NOT_FOUND","APP_INSTALL_LINK","settingsFetchErr","channelSettings","fetchSettings","PARTICIPANTS","POINTS","PROTECTED","custom_points","openModal","stripMentions","ActionRoute","payload","interactiveMessage","viewSubmission","callbackId","domain","user","parts","INVALID_ARGUMENT","action","sessionErr","teamErr","sessionAction","revealSession","cancelSession","vote","createSession","rawPrivateMetadata","privateMetadata","titleInputState","values","TITLE_REQUIRED","participantsInputState","selected_users","NO_PARTICIPANTS","pointsInputState","pointsStr","INVALID_POINTS","otherCheckboxesState","other","selectedOptions","selected_options","option","protected","postMessageResponse","upsertSettingErr","upsertSettings","shouldLog","logLevel","errorMessage","modalErrors","slackErrorCode","needed","userErrorMessage","response_action","errors","voteErr","sessionProtected","sessionCreatorId","revealErr","revealAndUpdateMessage","cancelErr","cancelAndUpdateMessage","config","traceProvider","register","REPORT_TRACES","exporter","serviceName","tags","host","JAEGER_HOST","port","parseInt","JAEGER_PORT","logger","debug","addSpanProcessor","setupTracing","filename","DB_FILE","driver","migrate","resolve","reject","once","on","server","engine","extname","use","extended","BASE_PATH","router","next","SLACK_SCOPE","COUNTLY_URL","handle","post","url","redirect","initRoutes","listen","PORT","initServer","init","app_key","main","exit"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","module.exports = require(\"@opentelemetry/api\");","module.exports = require(\"shortid\");","module.exports = require(\"countly-sdk-nodejs\");","module.exports = require(\"@slack/web-api\");","module.exports = require(\"lodash/isObject\");","module.exports = require(\"express\");","module.exports = require(\"util\");","module.exports = require(\"@opentelemetry/tracing\");","module.exports = require(\"body-parser\");","module.exports = require(\"lodash/map\");","module.exports = require(\"@opentelemetry/exporter-jaeger\");","module.exports = require(\"sqlite3\");","module.exports = require(\"sqlite\");","module.exports = require(\"redis\");","module.exports = require(\"express-handlebars\");","module.exports = require(\"async_hooks\");","module.exports = require(\"lodash/isString\");","module.exports = require(\"lodash/uniqBy\");","module.exports = require(\"lodash/chunk\");","module.exports = require(\"lodash/groupBy\");","module.exports = require(\"lodash/isEmpty\");","module.exports = require(\"lodash/uniq\");","module.exports = require(\"lodash/find\");","module.exports = require(\"dotenv\");","import isObject from 'lodash/isObject';\n\nexport function info(message: string, ...args: any[]) {\n  args[0] = `${new Date().toISOString()} - [info] ${message}`;\n  args.forEach((arg, i) => {\n    if (isObject(arg)) {\n      args[i] = JSON.stringify(arg);\n    }\n  });\n  console.log(...args);\n}\n\nexport function warn(message: string, ...args: any[]) {\n  args[0] = `${new Date().toISOString()} - [warn] ${message}`;\n  args.forEach((arg, i) => {\n    if (isObject(arg)) {\n      args[i] = JSON.stringify(arg);\n    }\n  });\n  console.warn(...args);\n}\n\nexport function error(message: string, ...args: any[]) {\n  args[0] = `${new Date().toISOString()} - [error] ${message}`;\n  args.forEach((arg, i) => {\n    if (isObject(arg)) {\n      args[i] = JSON.stringify(arg);\n    }\n  });\n  console.error(...args);\n}\n","import * as sqlite3 from 'sqlite3';\nimport { open, Database } from 'sqlite';\nimport * as logger from './logger';\n\nlet db: Database<sqlite3.Database, sqlite3.Statement>;\n\nexport async function init() {\n  if (db) {\n    logger.warn('Trying to init sqlite multiple times!');\n    return db;\n  }\n\n  logger.info('Opening sqlite...');\n  db = await open({\n    filename: process.env.DB_FILE,\n    driver: sqlite3.Database,\n  });\n\n  logger.info('Migrating sqlite...');\n  await db.migrate();\n\n  return db;\n}\n\nexport function getSingleton() {\n  return db;\n}\n","import * as redis from 'redis';\n\nimport * as logger from './logger';\n\nlet client: redis.RedisClient;\n\nexport async function init() {\n  if (client) {\n    logger.warn('Trying to init redis multiple times!');\n    return client;\n  }\n\n  logger.info(`Creating redis client...`);\n  client = redis.createClient();\n\n  await new Promise((resolve, reject) => {\n    client.once('ready', resolve);\n    client.once('error', reject);\n  });\n\n  client.on('error', (err) => {\n    logger.error(`[redis] an error occured`, err);\n  });\n\n  return client;\n}\n\nexport function getSingleton() {\n  return client;\n}\n","import { AsyncLocalStorage } from 'async_hooks';\nimport * as opentelemetry from '@opentelemetry/api';\n\nconst asyncLocalStorage = new AsyncLocalStorage<{\n  span: opentelemetry.Span;\n}>();\n\nexport function Trace(\n  options: {\n    name?: string;\n  } = {}\n) {\n  return (\n    target: any,\n    propertyName: string,\n    propertyDesciptor: TypedPropertyDescriptor<any>\n  ) => {\n    const originalMethod = propertyDesciptor.value;\n    const spanName = options.name || `${target.name}.${propertyName}`; // target.name only works with static methods\n\n    // Replace the method\n    propertyDesciptor.value = function (...args: any[]) {\n      const tracer = opentelemetry.trace.getTracer('default');\n      const ctx = asyncLocalStorage.getStore();\n      const spanOptions: opentelemetry.SpanOptions = {};\n\n      if (ctx) {\n        spanOptions.parent = ctx.span;\n      }\n\n      // Start a new span for the method\n      const span = tracer.startSpan(spanName, spanOptions);\n\n      // Execute original method\n      try {\n        const rv: any = asyncLocalStorage.run({ span }, () =>\n          originalMethod.apply(this, args)\n        );\n\n        // Auto finish is on, check return value is promise\n        // Instead of `instanceof` check, prefer checking `.then()` method exists on object.\n        // User may be using custom promise polyfill (https://stackoverflow.com/a/27746324)\n        if (typeof rv == 'object' && rv.then && rv.catch) {\n          return rv\n            .then((val: any) => {\n              // Promise resolved\n              span.end();\n              return val;\n            })\n            .catch((err: any) => {\n              // Promise is rejected\n              // https://github.com/opentracing/specification/blob/master/semantic_conventions.md\n              span.addEvent('error', {\n                event: 'error',\n                message: err.message,\n                stack: err.stack,\n                'error.kind': err.name,\n              });\n              span.setStatus({\n                code: opentelemetry.CanonicalCode.UNKNOWN,\n                message: err.message,\n              });\n              span.end();\n              throw err;\n            });\n        }\n\n        // If return value is not promise, finish and return\n        span.end();\n        return rv;\n      } catch (err) {\n        // Method throwed an error\n        // https://github.com/opentracing/specification/blob/master/semantic_conventions.md\n        span.addEvent('error', {\n          event: 'error',\n          message: err.message,\n          stack: err.stack,\n          'error.kind': err.name,\n        });\n        span.setStatus({\n          code: opentelemetry.CanonicalCode.UNKNOWN,\n          message: err.message,\n        });\n        span.end();\n        throw err;\n      }\n    };\n\n    return propertyDesciptor;\n  };\n}\n\nexport function getSpan() {\n  const ctx = asyncLocalStorage.getStore();\n  return ctx?.span;\n}\n","import * as sqlite from '../lib/sqlite';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport interface ITeam {\n  id: string;\n  name: string;\n  access_token: string;\n  scope: string;\n  user_id: string;\n  custom_points: string;\n}\n\nexport enum ChannelSettingKey {\n  PARTICIPANTS = 'participants',\n  POINTS = 'points',\n  PROTECTED = 'proctected',\n}\n\nexport interface IChannelSetting {\n  team_id: string;\n  channel_id: string;\n  setting_key: string;\n  setting_value: string;\n}\n\nexport class TeamStore {\n  @Trace()\n  static async findById(id: string): Promise<ITeam> {\n    const span = getSpan();\n    span?.setAttribute('id', id);\n    const db = sqlite.getSingleton();\n    return db.get('SELECT * FROM team WHERE id = ?', id);\n  }\n\n  @Trace()\n  static async create({\n    id,\n    name,\n    access_token,\n    scope,\n    user_id,\n  }: Pick<ITeam, 'id' | 'name' | 'access_token' | 'scope' | 'user_id'>) {\n    const span = getSpan();\n    span?.setAttributes({ id, name, scope, user_id });\n    const db = sqlite.getSingleton();\n    await db.run(\n      `INSERT INTO\n          team (id, name, access_token, scope, user_id)\n        VALUES\n          ($id, $name, $access_token, $scope, $user_id)`,\n      {\n        $id: id,\n        $name: name,\n        $access_token: access_token,\n        $scope: scope,\n        $user_id: user_id,\n      }\n    );\n  }\n\n  @Trace()\n  static async update({\n    id,\n    name,\n    access_token,\n    scope,\n    user_id,\n  }: Pick<ITeam, 'id' | 'name' | 'access_token' | 'scope' | 'user_id'>) {\n    const span = getSpan();\n    span?.setAttributes({ id, name, scope, user_id });\n    const db = sqlite.getSingleton();\n    await db.run(\n      `UPDATE\n        team\n      SET\n        name = $name,\n        access_token = $access_token,\n        scope = $scope,\n        user_id = $user_id\n      WHERE\n        id = $id`,\n      {\n        $id: id,\n        $name: name,\n        $access_token: access_token,\n        $scope: scope,\n        $user_id: user_id,\n      }\n    );\n  }\n\n  @Trace()\n  static async upsert({\n    id,\n    name,\n    access_token,\n    scope,\n    user_id,\n  }: Pick<ITeam, 'id' | 'name' | 'access_token' | 'scope' | 'user_id'>) {\n    const span = getSpan();\n    span?.setAttributes({ id, name, scope, user_id });\n    const team = await TeamStore.findById(id);\n    if (!team) {\n      await TeamStore.create({ id, name, access_token, scope, user_id });\n    } else {\n      await TeamStore.update({ id, name, access_token, scope, user_id });\n    }\n    return TeamStore.findById(id);\n  }\n\n  @Trace()\n  static async fetchSettings(teamId: string, channelId: string) {\n    const span = getSpan();\n    span?.setAttributes({ teamId, channelId });\n    const db = sqlite.getSingleton();\n    const settingRows = await db.all(\n      `SELECT\n        setting_key,\n        setting_value\n      FROM\n        channel_settings\n      WHERE\n        team_id = $teamId AND\n        channel_id = $channelId;`,\n      {\n        $teamId: teamId,\n        $channelId: channelId,\n      }\n    );\n\n    const rv: { [key: string]: string } = {};\n    settingRows.forEach((row: IChannelSetting) => {\n      rv[row.setting_key] = row.setting_value;\n    });\n\n    return rv;\n  }\n\n  @Trace()\n  static async upsertSettings(\n    teamId: string,\n    channelId: string,\n    settings: { [key: string]: string }\n  ) {\n    const tasks = Object.keys(settings).map((settingKey) =>\n      TeamStore.upsertSetting(\n        teamId,\n        channelId,\n        settingKey,\n        settings[settingKey]\n      )\n    );\n    await Promise.all(tasks);\n  }\n\n  @Trace()\n  static async upsertSetting(\n    teamId: string,\n    channelId: string,\n    key: string,\n    value: string\n  ) {\n    const span = getSpan();\n    span?.setAttributes({ teamId, channelId, key, value });\n    const db = sqlite.getSingleton();\n    await db.run(\n      `INSERT INTO\n        channel_settings (team_id, channel_id, setting_key, setting_value)\n      VALUES (\n        $teamId,\n        $channelId,\n        $settingKey,\n        $settingValue\n      )\n      ON CONFLICT(team_id, channel_id, setting_key)\n      DO UPDATE SET setting_value = $settingValue;`,\n      {\n        $teamId: teamId,\n        $channelId: channelId,\n        $settingKey: key,\n        $settingValue: value,\n      }\n    );\n  }\n\n  static async updateCustomPoints(teamId: string, customPoints: string) {\n    const db = sqlite.getSingleton();\n    const customPointsArr = customPoints.match(/\\S+/g) || [];\n    customPoints = customPointsArr.join(' ');\n    if (!customPoints) customPoints = null;\n\n    await db.run(\n      `UPDATE\n        team\n      SET\n        custom_points = $customPoints\n      WHERE\n        id = $id`,\n      {\n        $id: teamId,\n        $customPoints: customPoints,\n      }\n    );\n  }\n}\n","/**\n * Inspired by\n * https://medium.com/javascript-in-plain-english/how-to-avoid-try-catch-statements-nesting-chaining-in-javascript-a79028b325c5\n */\n\nexport async function to<T>(promise: Promise<T>): Promise<[Error, T]> {\n  try {\n    return [undefined, await promise];\n  } catch (err) {\n    return [err, undefined];\n  }\n}\n","import * as express from 'express';\nimport { WebClient } from '@slack/web-api';\nimport * as logger from '../lib/logger';\nimport Countly from 'countly-sdk-nodejs';\nimport { TeamStore } from '../team/team-model';\nimport { generate as generateId } from 'shortid';\nimport { to } from '../lib/to';\n\nexport class OAuthRoute {\n  /**\n   * GET /oauth\n   */\n  static async handle(req: express.Request, res: express.Response) {\n    // Slack-side error, display error message\n    if (req.query.error) {\n      logger.error(`Could not oauth, req.query.error: ${req.query.error}`);\n      return res.status(500).send(req.query.error);\n    }\n\n    // Installed!\n    if (req.query.code) {\n      const slackWebClient = new WebClient();\n      const [oauthErr, accessResponse] = await to(\n        slackWebClient.oauth.v2.access({\n          client_id: process.env.SLACK_CLIENT_ID,\n          client_secret: process.env.SLACK_CLIENT_SECRET,\n          code: req.query.code as string,\n        })\n      );\n\n      if (oauthErr) {\n        const errorId = generateId();\n        logger.error(\n          `(${errorId}) Could not oauth, slack api call failed`,\n          oauthErr\n        );\n        return res\n          .status(500)\n          .send(\n            `Internal server error, please try again (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`\n          );\n      }\n\n      const [upsertErr, team] = await to(\n        TeamStore.upsert({\n          id: (accessResponse as any).team.id,\n          name: (accessResponse as any).team.name,\n          access_token: (accessResponse as any).access_token,\n          scope: (accessResponse as any).scope,\n          user_id: (accessResponse as any).authed_user.id,\n        })\n      );\n\n      if (upsertErr) {\n        const errorId = generateId();\n        logger.error(\n          `(${errorId}) Could not oauth, sqlite upsert failed - ${upsertErr.message}`,\n          upsertErr\n        );\n        res\n          .status(500)\n          .send(\n            `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`\n          );\n      }\n\n      if (process.env.COUNTLY_APP_KEY) {\n        Countly.add_event({\n          key: 'added_to_team',\n          count: 1,\n          segmentation: {},\n        });\n      }\n\n      logger.info(\n        `Added to team \"${team.name}\"(${team.id}) by ${team.user_id}`\n      );\n\n      return res.render('oauth-success', {\n        layout: false,\n        data: {\n          SLACK_APP_ID: process.env.SLACK_APP_ID,\n          TEAM_NAME: team.name,\n        },\n      });\n    }\n\n    // Unknown error\n    const errorId = generateId();\n    logger.error(`(${errorId}) Could not oauth, unknown error`, req.query);\n    return res\n      .status(500)\n      .send(\n        `Unknown error (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`\n      );\n  }\n}\n","export function matchAll(str: string, regex: RegExp) {\n  const res: string[] = [];\n  let m: RegExpExecArray;\n  if (regex.global) {\n    while ((m = regex.exec(str))) {\n      res.push(m[1]);\n    }\n  } else {\n    if ((m = regex.exec(str))) {\n      res.push(m[1]);\n    }\n  }\n  return res;\n}\n","import { ISlackChatPostMessageResponse } from '../vendor/slack-api-interfaces';\nimport * as logger from '../lib/logger';\nimport * as redis from '../lib/redis';\nimport { promisify } from 'util';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport interface ISessionMention {\n  type: 'user' | 'special' | 'user-group';\n  id: string;\n}\n\nexport interface ISession {\n  /**\n   * Random generated session id.\n   */\n  id: string;\n  /**\n   * Title of the session. Mentions are excluded.\n   */\n  title: string;\n  /**\n   * Slack Channel ID.\n   */\n  channelId: string;\n  /**\n   * Slack User ID who starts this session.\n   */\n  userId: string;\n  /**\n   * Poker point values.\n   */\n  points: string[];\n  /**\n   * List of User IDs resolved from used mentions.\n   */\n  participants: string[];\n  /**\n   * Votes like { U2147483697: '3', U2147483698: '2' }\n   */\n  votes: { [key: string]: string };\n  /**\n   * Session state.\n   */\n  state: 'active' | 'revealed' | 'cancelled';\n  /**\n   * The result of `chat.postMessage` that sent by our bot to\n   * the channel/conversation to /pp command used in.\n   */\n  rawPostMessageResponse: ISlackChatPostMessageResponse;\n  /**\n   * Whether this session is protected, which means only the owner\n   * can cancel and reveal session.\n   */\n  protected: boolean;\n}\n\nexport class SessionStore {\n  @Trace()\n  static async findById(id: string): Promise<ISession> {\n    const span = getSpan();\n    span?.setAttribute('id', id);\n    const client = redis.getSingleton();\n    const getAsync = promisify(client.get.bind(client));\n    const rawSession = await getAsync(buildRedisKey(id));\n    if (!rawSession) return;\n    return JSON.parse(rawSession);\n  }\n\n  @Trace()\n  static async upsert(session: ISession) {\n    const span = getSpan();\n    span?.setAttribute('id', session.id);\n    const client = redis.getSingleton();\n    const setAsync = promisify(client.set.bind(client));\n    await setAsync(\n      buildRedisKey(session.id),\n      JSON.stringify(session),\n      'EX',\n      Number(process.env.SESSION_TTL)\n    );\n  }\n\n  @Trace()\n  static async delete(id: string) {\n    const span = getSpan();\n    span?.setAttribute('id', id);\n    const client = redis.getSingleton();\n    const delAsync = promisify(client.del.bind(client));\n    await delAsync(buildRedisKey(id));\n  }\n}\n\nfunction buildRedisKey(sessionId: string) {\n  return `${process.env.REDIS_NAMESPACE}:session:${sessionId}`;\n}\n","import { matchAll } from '../lib/string-match-all';\nimport { ISession, ISessionMention, SessionStore } from './session-model';\nimport uniqBy from 'lodash/uniqBy';\nimport chunk from 'lodash/chunk';\nimport map from 'lodash/map';\nimport groupBy from 'lodash/groupBy';\nimport { ITeam } from '../team/team-model';\nimport { WebClient } from '@slack/web-api';\nimport * as logger from '../lib/logger';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport const DEFAULT_POINTS = [\n  '0',\n  '1/2',\n  '1',\n  '2',\n  '3',\n  '5',\n  '8',\n  '13',\n  '20',\n  '40',\n  '100',\n  '∞',\n  '?',\n];\n\nexport enum SessionControllerErrorCode {\n  NO_PARTICIPANTS = 'no_participants',\n  TITLE_REQUIRED = 'title_required',\n  INVALID_POINTS = 'invalid_points',\n  SESSION_NOT_ACTIVE = 'session_not_active',\n  ONLY_PARTICIPANTS_CAN_VOTE = 'only_participants_can_vote',\n}\n\nexport class SessionController {\n  /**\n   * Sends a message for the provided session.\n   * CAUTION: Participants must resolved before using this method.\n   */\n  @Trace()\n  static async postMessage(session: ISession, team: ITeam) {\n    const slackWebClient = new WebClient(team.access_token);\n    const votesText = map(\n      session.participants.sort(),\n      (userId) => `<@${userId}>: awaiting`\n    ).join('\\n');\n\n    return slackWebClient.chat.postMessage({\n      channel: session.channelId,\n      text: `Title: *${session.title}*\\n\\nVotes:\\n${votesText}`,\n      attachments: buildMessageAttachments(session) as any,\n    });\n  }\n\n  /**\n   * Opens a `new session` modal\n   */\n  @Trace()\n  static async openModal({\n    triggerId,\n    team,\n    channelId,\n    title,\n    participants,\n    points,\n    isProtected,\n  }: {\n    triggerId: string;\n    team: ITeam;\n    channelId: string;\n    title: string;\n    participants: string[];\n    points: string[];\n    isProtected: boolean;\n  }) {\n    const slackWebClient = new WebClient(team.access_token);\n\n    const protectedCheckboxesOption = {\n      text: {\n        type: 'plain_text',\n        text: 'Protected (prevent others to cancel or reveal this session)',\n        emoji: true,\n      },\n      value: 'protected',\n    } as any;\n\n    await slackWebClient.views.open({\n      trigger_id: triggerId,\n      view: {\n        callback_id: `newSessionModal:submit`,\n        private_metadata: JSON.stringify({ channelId }),\n        type: 'modal',\n        title: {\n          type: 'plain_text',\n          text: 'Poker Planner',\n          emoji: true,\n        },\n        submit: {\n          type: 'plain_text',\n          text: 'Start New Session',\n          emoji: true,\n        },\n        close: {\n          type: 'plain_text',\n          text: 'Cancel',\n          emoji: true,\n        },\n        blocks: [\n          {\n            type: 'input',\n            block_id: 'title',\n            element: {\n              type: 'plain_text_input',\n              placeholder: {\n                type: 'plain_text',\n                text: 'Write a topic for this voting session',\n                emoji: true,\n              },\n              initial_value: title || '',\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Session Title',\n              emoji: true,\n            },\n          },\n          {\n            type: 'input',\n            block_id: 'participants',\n            element: {\n              type: 'multi_users_select',\n              placeholder: {\n                type: 'plain_text',\n                text: 'Add users',\n                emoji: true,\n              },\n              initial_users: participants,\n              // max_selected_items: 25,\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Participants',\n              emoji: true,\n            },\n          },\n          {\n            type: 'input',\n            block_id: 'points',\n            element: {\n              type: 'plain_text_input',\n              placeholder: {\n                type: 'plain_text',\n                text: 'Change poker points',\n                emoji: true,\n              },\n              initial_value: points.join(' ') || DEFAULT_POINTS.join(' '),\n            },\n            hint: {\n              type: 'plain_text',\n              text: 'Enter points seperated by space',\n              emoji: true,\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Points',\n              emoji: true,\n            },\n          },\n          {\n            type: 'input',\n            block_id: 'other',\n            optional: true,\n            element: {\n              type: 'checkboxes',\n              options: [protectedCheckboxesOption],\n              initial_options: isProtected\n                ? [protectedCheckboxesOption]\n                : undefined,\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Other',\n              emoji: true,\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  /**\n   * Updates the session message as revealing all the votes.\n   * And clean-up the session from store.\n   */\n  @Trace()\n  static async revealAndUpdateMessage(\n    session: ISession,\n    team: ITeam,\n    userId: string\n  ) {\n    session.state = 'revealed';\n    await SessionController.updateMessage(session, team, userId);\n    await SessionStore.delete(session.id);\n  }\n\n  /**\n   * Updates the session message as cancelled.\n   * And clean-up the session from store.\n   */\n  @Trace()\n  static async cancelAndUpdateMessage(\n    session: ISession,\n    team: ITeam,\n    userId: string\n  ) {\n    session.state = 'cancelled';\n    await SessionController.updateMessage(session, team, userId);\n    await SessionStore.delete(session.id);\n  }\n\n  /**\n   *\n   */\n  @Trace()\n  static async vote(\n    session: ISession,\n    team: ITeam,\n    userId: string,\n    point: string\n  ) {\n    if (session.state != 'active') {\n      throw new Error(SessionControllerErrorCode.SESSION_NOT_ACTIVE);\n    }\n\n    if (session.participants.indexOf(userId) == -1) {\n      throw new Error(SessionControllerErrorCode.ONLY_PARTICIPANTS_CAN_VOTE);\n    }\n\n    session.votes[userId] = point;\n    session.state =\n      Object.keys(session.votes).length == session.participants.length\n        ? 'revealed'\n        : 'active';\n\n    if (session.state == 'revealed') {\n      await SessionController.updateMessage(session, team); // do not send userId\n      await SessionStore.delete(session.id);\n      logger.info(\n        `[${team.name}(${team.id})] Auto revealing votes sessionId=${session.id}`\n      );\n      return;\n    }\n\n    // Voting is still active\n    await SessionStore.upsert(session);\n\n    try {\n      await SessionController.updateMessage(session, team);\n    } catch (err) {\n      logger.warn(`Could not refreshed session message after a vote, ${err}`);\n    }\n  }\n\n  /**\n   * Updates session message according to session state.\n   */\n  @Trace()\n  static async updateMessage(session: ISession, team: ITeam, userId?: string) {\n    const slackWebClient = new WebClient(team.access_token);\n\n    if (session.state == 'revealed') {\n      const voteGroups = groupBy(\n        session.participants,\n        (userId) => session.votes[userId] || 'not-voted'\n      );\n      const votesText = Object.keys(voteGroups)\n        .sort()\n        .map((point) => {\n          const votes = voteGroups[point];\n          const peopleText =\n            votes.length == 1 ? `1 person` : `${votes.length} people`;\n          const userIds = votes\n            .sort()\n            .map((userId) => `<@${userId}>`)\n            .join(', ');\n\n          if (point == 'not-voted') {\n            return `${peopleText} *did not voted* (${userIds})`;\n          }\n\n          return `${peopleText} voted *${point}* (${userIds})`;\n        })\n        .join('\\n');\n\n      await slackWebClient.chat.update({\n        ts: session.rawPostMessageResponse.ts,\n        channel: session.rawPostMessageResponse.channel,\n        text: userId\n          ? `Title: *${session.title}* (revealed by <@${userId}>)\\n\\nResult:\\n${votesText}`\n          : `Title: *${session.title}*\\n\\nResult:\\n${votesText}`,\n        attachments: [],\n      });\n    } else if (session.state == 'cancelled') {\n      await slackWebClient.chat.update({\n        ts: session.rawPostMessageResponse.ts,\n        channel: session.rawPostMessageResponse.channel,\n        text: userId\n          ? `Title: *${session.title}* (cancelled by <@${userId}>)`\n          : `Title: *${session.title}* (cancelled)`,\n        attachments: [],\n      });\n    } else {\n      const votesText = map(session.participants.sort(), (userId) => {\n        if (session.votes.hasOwnProperty(userId)) {\n          return `<@${userId}>: :white_check_mark:`;\n        }\n\n        return `<@${userId}>: awaiting`;\n      }).join('\\n');\n\n      await slackWebClient.chat.update({\n        ts: session.rawPostMessageResponse.ts,\n        channel: session.rawPostMessageResponse.channel,\n        text: `Title: *${session.title}*\\n\\nVotes:\\n${votesText}`,\n        attachments: buildMessageAttachments(session) as any,\n      });\n    }\n  }\n\n  /**\n   * For a given slack slash-command text, extract mentions\n   */\n  static exractMentions(text: string) {\n    const allMentions: ISessionMention[] = [];\n\n    // User mentions\n    matchAll(text, /<@(.*?)>/g).forEach((str) => {\n      allMentions.push({ type: 'user', id: str.split('|')[0] });\n    });\n\n    // Group mentions\n    matchAll(text, /<!(.*?)>/g).forEach((str) => {\n      const specialMentions = ['everyone', 'channel', 'here'];\n      if (specialMentions.indexOf(str) > -1) {\n        allMentions.push({ type: 'special', id: str });\n      } else if (str.includes('subteam')) {\n        // Custom user group mentions\n        const [id, name] = str.replace('subteam^', '').split('|');\n\n        allMentions.push({\n          type: 'user-group',\n          id,\n        });\n      }\n    });\n\n    // Remove duplicate mentions\n    return uniqBy(allMentions, (mention) => `${mention.type}-${mention.id}`);\n  }\n\n  /**\n   * For a given slack slash-command text, extract mentions\n   */\n  static stripMentions(text: string) {\n    return text\n      .replace(/<@(.*?)>/g, '')\n      .replace(/<!(.*?)>/g, '')\n      .replace(/\\s\\s+/g, ' ')\n      .trim();\n  }\n}\n\nexport function buildMessageAttachments(session: ISession) {\n  const pointAttachments = chunk(session.points, 5).map((points) => {\n    return {\n      text: '',\n      fallback: 'You are unable to vote',\n      callback_id: `vote:${session.id}`,\n      color: '#3AA3E3',\n      attachment_type: 'default',\n      actions: points.map((point) => ({\n        name: 'point',\n        text: point,\n        type: 'button',\n        value: point,\n      })),\n    };\n  });\n\n  return [\n    ...pointAttachments,\n    {\n      text: 'Actions',\n      fallback: 'You are unable to send action',\n      callback_id: `action:${session.id}`,\n      color: '#3AA3E3',\n      attachment_type: 'default',\n      actions: [\n        {\n          name: 'action',\n          text: 'Reveal',\n          type: 'button',\n          value: 'reveal',\n          style: 'danger',\n        },\n        {\n          name: 'action',\n          text: 'Cancel',\n          type: 'button',\n          value: 'cancel',\n          style: 'danger',\n        },\n      ],\n    },\n  ];\n}\n","import * as express from 'express';\nimport * as logger from '../lib/logger';\nimport Countly from 'countly-sdk-nodejs';\nimport { TeamStore, ChannelSettingKey } from '../team/team-model';\nimport { generate as generateId } from 'shortid';\nimport { to } from '../lib/to';\nimport isString from 'lodash/isString';\nimport { ISlackCommandRequestBody } from '../vendor/slack-api-interfaces';\nimport {\n  SessionController,\n  DEFAULT_POINTS,\n} from '../session/session-controller';\nimport * as opentelemetry from '@opentelemetry/api';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport class PPCommandRoute {\n  /**\n   * POST /slack/pp-command\n   */\n  static async handle(req: express.Request, res: express.Response) {\n    const cmd = req.body as ISlackCommandRequestBody;\n\n    if (cmd.token != process.env.SLACK_VERIFICATION_TOKEN) {\n      logger.error(\n        `Could not created session, slack verification token is invalid`,\n        cmd\n      );\n      return res.json({\n        text: `Invalid slack verification token, please get in touch with the maintainer`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!isString(cmd.text)) {\n      const errorId = generateId();\n      logger.error(\n        `(${errorId}) Could not created session, command.text not string`,\n        cmd\n      );\n      return res.json({\n        text:\n          `Unexpected command usage (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const firstWord = cmd.text.trim().split(' ')[0];\n    switch (firstWord) {\n      case 'help': {\n        return PPCommandRoute.help(res);\n      }\n\n      case 'config': {\n        return await PPCommandRoute.configure(cmd, res);\n      }\n\n      default: {\n        return await PPCommandRoute.openNewSessionModal(cmd, res);\n      }\n    }\n  }\n\n  /**\n   * `/pp some task name`\n   */\n  @Trace()\n  static async openNewSessionModal(\n    cmd: ISlackCommandRequestBody,\n    res: express.Response\n  ) {\n    const span = getSpan();\n    span?.setAttributes({\n      teamId: cmd.team_id,\n      teamDomain: cmd.team_domain,\n      channelId: cmd.channel_id,\n      channelName: cmd.channel_name,\n      userId: cmd.user_id,\n      userName: cmd.user_name,\n      text: cmd.text,\n    });\n\n    if (cmd.channel_name == 'directmessage') {\n      return res.json({\n        text: `Poker planning cannot be started in direct messages`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const [teamGetErr, team] = await to(TeamStore.findById(cmd.team_id));\n    if (teamGetErr) {\n      const errorId = generateId();\n      logger.error(\n        `(${errorId}) Could not created session, could not get the team from db`,\n        cmd,\n        teamGetErr\n      );\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: teamGetErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!team) {\n      logger.info(`Could not created session, team could not be found`, cmd);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Team not found',\n      });\n      return res.json({\n        text: `Your Slack team (${cmd.team_domain}) could not be found, please reinstall Poker Planner on <${process.env.APP_INSTALL_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    // If permissions are old, show migration message\n    if (\n      team.scope ==\n      'identify,commands,channels:read,groups:read,users:read,chat:write:bot'\n    ) {\n      logger.info(\n        `[${team.name}(${team.id})] ${cmd.user_name}(${cmd.user_id}) sees migration message`\n      );\n      span?.addEvent('show_migration_message');\n      return res.json({\n        text:\n          'Poker Planner has migrated to ' +\n          \"<https://slackhq.com/introducing-a-dramatically-upgraded-slack-app-toolkit|Slack's new app toolkit> \" +\n          'which adds granular permissions for better security. We now depend on bot permissions instead of ' +\n          'user permissions. So that you can explicitly manage which channels/conversations Poker Planner can ' +\n          'access. However, this requires a couple of changes:\\n\\n• In order to obtain new bot permissions ' +\n          'and drop user ones, *you need to reinstall Poker Planner* to your workspace on ' +\n          `<${process.env.APP_INSTALL_LINK}>\\n• Before using \\`/pp\\` command, *Poker Planner app must be ` +\n          'added to that channel/conversation*. You can simply add or invite it by just mentioning the app like ' +\n          '`@poker_planner`. You can also do that from channel/converstion details menu.',\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    /**\n     * From: https://api.slack.com/legacy/interactive-messages\n     *\n     * Responding right away\n     * ---\n     * You must respond within 3 seconds. If it takes your application longer\n     * to process the request, we recommend responding with a HTTP 200 OK\n     * immediately, then use the response_url to respond five times within\n     * thirty minutes.\n     *\n     * Responding incrementally with response_url\n     * ---\n     * Use the response URL provided in the post to:\n     * - Replace the current message\n     * - Respond with a public message in the channel\n     * - Respond with an ephemeral message in the channel that only the\n     * acting user will see\n     *\n     * You'll be able to use a response_url five times within 30 minutes.\n     * After that, it's best to move on to new messages and new interactions.\n     */\n\n    try {\n      // Prepare settings (participants, points...)\n      const [settingsFetchErr, channelSettings] = await to(\n        TeamStore.fetchSettings(team.id, cmd.channel_id)\n      );\n      if (settingsFetchErr) {\n        span?.addEvent('settings_fetch_error', {\n          error: settingsFetchErr.message,\n        });\n      }\n      const settings = {\n        [ChannelSettingKey.PARTICIPANTS]: [] as string[],\n        [ChannelSettingKey.POINTS]: DEFAULT_POINTS,\n        [ChannelSettingKey.PROTECTED]: false,\n      };\n      if (channelSettings?.[ChannelSettingKey.PARTICIPANTS]) {\n        settings[ChannelSettingKey.PARTICIPANTS] = channelSettings[\n          ChannelSettingKey.PARTICIPANTS\n        ].split(' ');\n      }\n      if (team.custom_points) {\n        settings[ChannelSettingKey.POINTS] = team.custom_points.split(' ');\n      }\n      if (channelSettings?.[ChannelSettingKey.POINTS]) {\n        settings[ChannelSettingKey.POINTS] = channelSettings[\n          ChannelSettingKey.POINTS\n        ].split(' ');\n      }\n      if (channelSettings?.[ChannelSettingKey.PROTECTED]) {\n        settings[ChannelSettingKey.PROTECTED] = JSON.parse(\n          channelSettings[ChannelSettingKey.PROTECTED]\n        );\n      }\n\n      await SessionController.openModal({\n        triggerId: cmd.trigger_id,\n        team,\n        channelId: cmd.channel_id,\n        title: SessionController.stripMentions(cmd.text).trim(),\n        participants: settings[ChannelSettingKey.PARTICIPANTS],\n        points: settings[ChannelSettingKey.POINTS],\n        isProtected: settings[ChannelSettingKey.PROTECTED],\n      });\n\n      // Send acknowledgement back to API -- HTTP 200\n      res.send();\n\n      if (process.env.COUNTLY_APP_KEY) {\n        Countly.add_event({\n          key: 'new_session_modal_opened',\n          count: 1,\n          segmentation: {},\n        });\n      }\n    } catch (err) {\n      const errorId = generateId();\n      logger.error(`(${errorId}) Could not open modal`, cmd, err);\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: err.message,\n      });\n      return res.json({\n        text:\n          `Could not open modal (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n  }\n\n  /**\n   * `/pp config ...`\n   */\n  static async configure(cmd: ISlackCommandRequestBody, res: express.Response) {\n    return res.json({\n      text:\n        'This command is depracated. The session settings (points, participants, ...) ' +\n        'are now persisted automatically for each channel/conversation.',\n      response_type: 'ephemeral',\n      replace_original: false,\n    });\n  }\n\n  /**\n   * `/pp help`\n   */\n  static help(res: express.Response) {\n    return res.json({\n      text: ``,\n      response_type: 'ephemeral',\n      replace_original: false,\n      attachments: [\n        {\n          color: '#3AA3E3',\n          text:\n            '`/pp`\\n' + 'Opens a dialog to start a new poker planning session.',\n        },\n        {\n          color: '#3AA3E3',\n          text:\n            '`/pp some topic text`\\n' +\n            'Opens the same dialog, however title input is automatically ' +\n            'filled with the value you provided.',\n        },\n      ],\n    });\n  }\n}\n","import * as express from 'express';\nimport * as logger from '../lib/logger';\nimport { generate as generateId } from 'shortid';\nimport { to } from '../lib/to';\nimport { TeamStore, ITeam, ChannelSettingKey } from '../team/team-model';\nimport { SessionStore, ISession } from '../session/session-model';\nimport {\n  SessionController,\n  SessionControllerErrorCode,\n  DEFAULT_POINTS,\n} from '../session/session-controller';\nimport Countly from 'countly-sdk-nodejs';\nimport isEmpty from 'lodash/isEmpty';\nimport {\n  IInteractiveMessageActionPayload,\n  IViewSubmissionActionPayload,\n} from '../vendor/slack-api-interfaces';\nimport uniq from 'lodash/uniq';\nimport find from 'lodash/find';\nimport * as opentelemetry from '@opentelemetry/api';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport class ActionRoute {\n  /**\n   * POST /slack/action-endpoint\n   * https://api.slack.com/interactivity/handling#payloads\n   */\n  static async handle(req: express.Request, res: express.Response) {\n    let payload:\n      | IInteractiveMessageActionPayload\n      | IViewSubmissionActionPayload;\n\n    try {\n      payload = JSON.parse(req.body.payload);\n    } catch (err) {\n      const errorId = generateId();\n      logger.error(`(${errorId}) Could not parse action payload`, req.body);\n      return res.json({\n        text:\n          `Unexpected slack action payload (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (payload.token != process.env.SLACK_VERIFICATION_TOKEN) {\n      logger.error(\n        `Could not process action, invalid verification token`,\n        payload\n      );\n      return res.json({\n        text: `Invalid slack verification token, please get in touch with the maintainer`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    switch (payload.type) {\n      case 'interactive_message': {\n        await ActionRoute.interactiveMessage({ payload, res });\n        return;\n      }\n\n      case 'view_submission': {\n        await ActionRoute.viewSubmission({ payload, res });\n        return;\n      }\n\n      default: {\n        const errorId = generateId();\n        logger.error(\n          `(${errorId}) Unexpected interactive-message action callbackId`,\n          payload\n        );\n        return res.json({\n          text:\n            `Unexpected payload type (error code: ${errorId})\\n\\n` +\n            `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n          response_type: 'ephemeral',\n          replace_original: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * A user clicks on a button on message\n   */\n  @Trace()\n  static async interactiveMessage({\n    payload, // action request payload\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      callbackId: payload.callback_id,\n      teamId: payload.team.id,\n      teamDomain: payload.team.domain,\n      userId: payload.user.id,\n      userName: payload.user.name,\n      channelId: payload.channel.id,\n      channelName: payload.channel.name,\n    });\n    const parts = payload.callback_id.split(':');\n\n    if (parts.length != 2) {\n      const errorId = generateId();\n      logger.error(\n        `(${errorId}) Unexpected interactive message callback id`,\n        payload\n      );\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n        message: `Unexpected callback_id`,\n      });\n      return res.json({\n        text:\n          `Unexpected interactive message callback id (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const [action, sessionId] = parts;\n    span?.setAttributes({ action, sessionId });\n\n    // Get session\n    const [sessionErr, session] = await to(SessionStore.findById(sessionId));\n\n    if (sessionErr) {\n      const errorId = generateId();\n      logger.error(`(${errorId}) Could not get session`, payload, sessionErr);\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: sessionErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!session) {\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Session not found',\n      });\n      return res.json({\n        text: `Ooops, could not find the session, it may be expired or cancelled`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    // Get team\n    const [teamErr, team] = await to(TeamStore.findById(payload.team.id));\n\n    if (teamErr) {\n      const errorId = generateId();\n      logger.error(`(${errorId}) Could not get team`, payload, sessionErr);\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: teamErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!team) {\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Team not found',\n      });\n      return res.json({\n        text: `Your Slack team (${payload.team.domain}) could not be found, please reinstall Poker Planner on <${process.env.APP_INSTALL_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    switch (action) {\n      /**\n       * A user clicked session actions button:\n       * - Reveal\n       * - Cancel\n       */\n      case 'action': {\n        const sessionAction = payload.actions[0].value;\n        span?.setAttributes({ sessionAction });\n\n        if (sessionAction == 'reveal') {\n          await ActionRoute.revealSession({ payload, team, session, res });\n        } else if (sessionAction == 'cancel') {\n          await ActionRoute.cancelSession({ payload, team, session, res });\n        } else {\n          const errorId = generateId();\n          logger.error(\n            `(${errorId}) Unexpected action button clicked: \"${sessionAction}\"`,\n            payload\n          );\n          span?.setAttribute('error.id', errorId);\n          span?.setStatus({\n            code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n            message: `Unexpected session action`,\n          });\n          res.json({\n            text:\n              `Unexpected action button (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n\n        return;\n      }\n\n      /**\n       * A user clicked vote point button\n       */\n      case 'vote': {\n        await ActionRoute.vote({ payload, team, session, res });\n        return;\n      }\n\n      /**\n       * Unexpected action\n       */\n      default: {\n        const errorId = generateId();\n        logger.error(`(${errorId}) Unexpected action: \"${action}\"`);\n        span?.setAttribute('error.id', errorId);\n        span?.setStatus({\n          code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n          message: `Unexpected action`,\n        });\n        return res.json({\n          text:\n            `Unexpected action (error code: ${errorId})\\n\\n` +\n            `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n          response_type: 'ephemeral',\n          replace_original: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * A user clicks a submit button a view\n   */\n  @Trace()\n  static async viewSubmission({\n    payload, // action request payload\n    res,\n  }: {\n    payload: IViewSubmissionActionPayload;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      teamId: payload.team.id,\n      teamDomain: payload.team.domain,\n      userId: payload.user.id,\n      userName: payload.user.name,\n    });\n\n    const [teamGetErr, team] = await to(TeamStore.findById(payload.team.id));\n    if (teamGetErr) {\n      const errorId = generateId();\n      logger.error(\n        `(${errorId}) Could not create session, could not get the team from db`,\n        payload,\n        teamGetErr\n      );\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: teamGetErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!team) {\n      logger.info(`Could not create session, team could not be found`, payload);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Team not found',\n      });\n      return res.json({\n        text: `Your Slack team (${payload.team.domain}) could not be found, please reinstall Poker Planner on <${process.env.APP_INSTALL_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const callbackId = payload.view.callback_id;\n    span?.setAttributes({ callbackId });\n\n    switch (callbackId) {\n      case 'newSessionModal:submit': {\n        return ActionRoute.createSession({ payload, team, res });\n      }\n\n      default: {\n        const errorId = generateId();\n        logger.error(\n          `(${errorId}) Unexpected view-submission action callbackId: \"${callbackId}\"`\n        );\n        span?.setAttribute('error.id', errorId);\n        span?.setStatus({\n          code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n          message: `Unexpected callback_id`,\n        });\n        return res.json({\n          text:\n            `Unexpected view-submission callback id (error code: ${errorId})\\n\\n` +\n            `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n          response_type: 'ephemeral',\n          replace_original: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * A user submits the `new session` modal.\n   */\n  @Trace()\n  static async createSession({\n    payload, // action request payload\n    team,\n    res,\n  }: {\n    payload: IViewSubmissionActionPayload;\n    team: ITeam;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n\n    try {\n      span?.setAttributes({\n        rawPrivateMetadata: payload.view.private_metadata,\n      });\n      const privateMetadata = JSON.parse(payload.view.private_metadata);\n      const titleInputState = payload.view.state.values.title as any;\n      const title = titleInputState[Object.keys(titleInputState)[0]].value;\n      span?.setAttributes({ title });\n\n      if (!title || title.trim().length == 0) {\n        throw new Error(SessionControllerErrorCode.TITLE_REQUIRED);\n      }\n\n      const participantsInputState = payload.view.state.values\n        .participants as any;\n      const participants =\n        participantsInputState[Object.keys(participantsInputState)[0]]\n          .selected_users;\n      span?.setAttributes({ participants: participants.join(' ') });\n\n      if (participants.length == 0) {\n        throw new Error(SessionControllerErrorCode.NO_PARTICIPANTS);\n      }\n\n      const pointsInputState = payload.view.state.values.points as any;\n      const pointsStr =\n        pointsInputState[Object.keys(pointsInputState)[0]].value || '';\n      let points: string[] = uniq(pointsStr.match(/\\S+/g)) || [];\n      span?.setAttributes({ points: pointsStr });\n\n      if (points.length == 1 && points[0] == 'reset') {\n        points = DEFAULT_POINTS;\n      }\n\n      if (points.length < 2 || points.length > 25) {\n        throw new Error(SessionControllerErrorCode.INVALID_POINTS);\n      }\n\n      const otherCheckboxesState = payload.view.state.values.other as any;\n      const selectedOptions =\n        otherCheckboxesState[Object.keys(otherCheckboxesState)[0]]\n          .selected_options || [];\n      const isProtected = !!find(\n        selectedOptions,\n        (option) => option.value == 'protected'\n      );\n      span?.setAttributes({ isProtected: `${isProtected}` });\n\n      // Create session struct\n      const session: ISession = {\n        id: generateId(),\n        title,\n        points,\n        votes: {},\n        state: 'active',\n        channelId: privateMetadata.channelId,\n        userId: payload.user.id,\n        participants,\n        rawPostMessageResponse: undefined,\n        protected: isProtected,\n      };\n      span?.setAttributes({\n        sessionId: session.id,\n        channelId: privateMetadata.channelId,\n        userId: payload.user.id,\n        userName: payload.user.name,\n      });\n\n      logger.info(\n        `[${team.name}(${team.id})] ${payload.user.name}(${payload.user.id}) trying to create ` +\n          `a session on #${privateMetadata.channelId} sessionId=${session.id}`\n      );\n\n      const postMessageResponse = await SessionController.postMessage(\n        session,\n        team\n      );\n      session.rawPostMessageResponse = postMessageResponse as any;\n\n      await SessionStore.upsert(session);\n\n      res.send();\n\n      const [upsertSettingErr] = await to(\n        TeamStore.upsertSettings(team.id, session.channelId, {\n          [ChannelSettingKey.PARTICIPANTS]: session.participants.join(' '),\n          [ChannelSettingKey.POINTS]: session.points.join(' '),\n          [ChannelSettingKey.PROTECTED]: JSON.stringify(session.protected),\n        })\n      );\n      if (upsertSettingErr) {\n        span?.addEvent('upsert_settings_error', {\n          message: upsertSettingErr.message,\n        });\n        logger.error(\n          `Could not upsert settings after creating new session`,\n          session,\n          upsertSettingErr\n        );\n      }\n\n      if (process.env.COUNTLY_APP_KEY) {\n        Countly.add_event({\n          key: 'topic_created',\n          count: 1,\n          segmentation: {\n            participants: session.participants.length,\n          },\n        });\n      }\n    } catch (err) {\n      const errorId = generateId();\n      let shouldLog = true;\n      let logLevel: 'info' | 'warn' | 'error' = 'error';\n      let errorMessage =\n        `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n        `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`;\n      let modalErrors: { [key: string]: string } = {};\n\n      const slackErrorCode = err.data && err.data.error;\n      if (slackErrorCode) {\n        span?.setAttributes({ slackErrorCode });\n        errorMessage =\n          `Unexpected Slack API Error: \"*${slackErrorCode}*\" (error code: ${errorId})\\n\\n` +\n          `If you think this is an issue, please report to <${process.env.ISSUES_LINK}>`;\n      }\n\n      /**\n       * Slack API platform errors\n       */\n      if (slackErrorCode == 'not_in_channel') {\n        shouldLog = false;\n        errorMessage =\n          `Poker Planner app is not added to this channel. ` +\n          `Please try again after adding it. ` +\n          `You can simply add the app just by mentioning it, like \"*@poker_planner*\".`;\n      } else if (slackErrorCode == 'channel_not_found') {\n        logLevel = 'info';\n        errorMessage =\n          `Oops, we couldn't find this channel. ` +\n          `Are you sure that Poker Planner app is added to this channel/conversation? ` +\n          `You can simply add the app by mentioning it, like \"*@poker_planner*\". ` +\n          `However this may not work in Group DMs, you need to explicitly add it as a ` +\n          `member from conversation details menu. Please try again after adding it.\\n\\n` +\n          `If you still have a problem, you can open an issue on <${process.env.ISSUES_LINK}> ` +\n          `with this error id: ${errorId}`;\n      } else if (slackErrorCode == 'token_revoked') {\n        logLevel = 'info';\n        errorMessage =\n          `Poker Planner's access has been revoked for this workspace. ` +\n          `In order to use it, you need to install the app again on ` +\n          `<${process.env.APP_INSTALL_LINK}>`;\n      } else if (slackErrorCode == 'method_not_supported_for_channel_type') {\n        logLevel = 'info';\n        errorMessage = `Poker Planner cannot be used in this type of conversations.`;\n      } else if (slackErrorCode == 'missing_scope') {\n        if (err.data.needed == 'mpim:read') {\n          logLevel = 'info';\n          errorMessage =\n            `Poker Planner now supports Group DMs! However it requires ` +\n            `additional permissions that we didn't obtained previously. You need to visit ` +\n            `<${process.env.APP_INSTALL_LINK}> and reinstall the app to enable this feature.`;\n        } else if (err.data.needed == 'usergroups:read') {\n          logLevel = 'info';\n          errorMessage =\n            `Poker Planner now supports @usergroup mentions! However it requires ` +\n            `additional permissions that we didn't obtained previously. You need to visit ` +\n            `<${process.env.APP_INSTALL_LINK}> and reinstall the app to enable this feature.`;\n        }\n      } else if (\n        /**\n         * Internal errors\n         */\n        err.message == SessionControllerErrorCode.NO_PARTICIPANTS\n      ) {\n        shouldLog = false;\n        errorMessage = `You must add at least 1 person.`;\n        modalErrors = {\n          participants: errorMessage,\n        };\n      } else if (err.message == SessionControllerErrorCode.TITLE_REQUIRED) {\n        shouldLog = false;\n        errorMessage = `Title is required`;\n        modalErrors = {\n          title: errorMessage,\n        };\n      } else if (err.message == SessionControllerErrorCode.INVALID_POINTS) {\n        shouldLog = false;\n        errorMessage = `You must provide at least 2 poker points, the maximum is 25.`;\n        modalErrors = {\n          points: errorMessage,\n        };\n      }\n\n      if (shouldLog) {\n        logger[logLevel](`(${errorId}) Could not create session`, payload, err);\n      }\n\n      span?.setAttributes({\n        'error.id': errorId,\n        userErrorMessage: errorMessage,\n      });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.UNKNOWN,\n        message: err.message,\n      });\n\n      // Show the generic errors on a new modal\n      if (isEmpty(modalErrors)) {\n        return res.json({\n          response_action: 'push',\n          view: {\n            type: 'modal',\n            title: {\n              type: 'plain_text',\n              text: 'Poker Planner',\n              emoji: true,\n            },\n            close: {\n              type: 'plain_text',\n              text: 'Close',\n              emoji: true,\n            },\n            blocks: [\n              {\n                type: 'section',\n                text: {\n                  type: 'mrkdwn',\n                  text: `:x: ${errorMessage}`,\n                },\n              },\n            ],\n          },\n        });\n      }\n\n      // Show error on form elements\n      return res.json({\n        response_action: 'errors',\n        errors: modalErrors,\n      });\n    }\n  }\n\n  /**\n   * A user clicks on a vote button.\n   */\n  @Trace()\n  static async vote({\n    payload, // action request payload\n    team,\n    session,\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    team: ITeam;\n    session: ISession;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    const point = payload.actions[0].value;\n    span?.setAttributes({ point });\n    logger.info(\n      `[${team.name}(${team.id})] ${payload.user.name}(${payload.user.id}) voting ${point} points sessionId=${session.id}`\n    );\n    const [voteErr] = await to(\n      SessionController.vote(session, team, payload.user.id, point)\n    );\n\n    if (voteErr) {\n      switch (voteErr.message) {\n        case SessionControllerErrorCode.SESSION_NOT_ACTIVE: {\n          return res.json({\n            text: `You cannot vote revealed or cancelled session`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n\n        case SessionControllerErrorCode.ONLY_PARTICIPANTS_CAN_VOTE: {\n          return res.json({\n            text: `You are not a participant of that session`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n\n        // Unknown error\n        default: {\n          const errorId = generateId();\n          logger.error(`(${errorId}) Could not vote`, voteErr);\n          span?.setAttributes({ 'error.id': errorId });\n          span?.setStatus({\n            code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n            message: `Unexpected vote error`,\n          });\n          return res.json({\n            text:\n              `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n      }\n    }\n\n    // Successfully voted\n\n    if (process.env.COUNTLY_APP_KEY) {\n      Countly.add_event({\n        key: 'topic_voted',\n        count: 1,\n        segmentation: {\n          points: payload.actions[0].value,\n        },\n      });\n    }\n\n    return res.send();\n  }\n\n  /**\n   * A user clicks reveal button.\n   */\n  @Trace()\n  static async revealSession({\n    payload, // action request payload\n    team,\n    session,\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    team: ITeam;\n    session: ISession;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      sessionProtected: session.protected,\n      sessionCreatorId: session.userId,\n    });\n\n    if (session.protected && session.userId != payload.user.id) {\n      return res.json({\n        text: `This session is protected, only the creator can reveal it.`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    logger.info(\n      `[${team.name}(${team.id})] ${payload.user.name}(${payload.user.id}) revealing votes sessionId=${session.id}`\n    );\n    const [revealErr] = await to(\n      SessionController.revealAndUpdateMessage(session, team, payload.user.id)\n    );\n\n    if (revealErr) {\n      const errorId = generateId();\n      logger.error(`(${errorId}) Could not reveal session`, revealErr);\n      span?.setAttributes({ 'error.id': errorId });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: `Unexpected error while reveal session & update message`,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (process.env.COUNTLY_APP_KEY) {\n      Countly.add_event({\n        key: 'topic_revealed',\n        count: 1,\n        segmentation: {},\n      });\n    }\n\n    return res.send();\n  }\n\n  /**\n   * A user clicks cancel button.\n   */\n  @Trace()\n  static async cancelSession({\n    payload, // action request payload\n    team,\n    session,\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    team: ITeam;\n    session: ISession;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      sessionProtected: session.protected,\n      sessionCreatorId: session.userId,\n    });\n\n    if (session.protected && session.userId != payload.user.id) {\n      return res.json({\n        text: `This session is protected, only the creator can cancel it.`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    logger.info(\n      `[${team.name}(${team.id})] ${payload.user.name}(${payload.user.id}) cancelling session sessionId=${session.id}`\n    );\n    const [cancelErr] = await to(\n      SessionController.cancelAndUpdateMessage(session, team, payload.user.id)\n    );\n\n    if (cancelErr) {\n      const errorId = generateId();\n      logger.error(`(${errorId}) Could not cancel session`, cancelErr);\n      span?.setAttributes({ 'error.id': errorId });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: `Unexpected error while cancel session & update message`,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (process.env.COUNTLY_APP_KEY) {\n      Countly.add_event({\n        key: 'topic_cancelled',\n        count: 1,\n        segmentation: {},\n      });\n    }\n\n    return res.send();\n  }\n}\n","require('dotenv').config();\nimport {\n  BasicTracerProvider,\n  BatchSpanProcessor,\n} from '@opentelemetry/tracing';\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\nsetupTracing();\n\nimport * as logger from './lib/logger';\nimport * as sqlite from './lib/sqlite';\nimport * as redis from './lib/redis';\nimport Countly from 'countly-sdk-nodejs';\nimport * as express from 'express';\nimport * as bodyParser from 'body-parser';\nimport * as path from 'path';\nimport * as exphbs from 'express-handlebars';\nimport { OAuthRoute } from './routes/oauth';\nimport { PPCommandRoute } from './routes/pp-command';\nimport { ActionRoute } from './routes/action';\n\nasync function main() {\n  // Start sqlite\n  await sqlite.init();\n\n  // Start redis\n  await redis.init();\n\n  // Start server\n  await initServer();\n\n  // If countly env variables exists, start countly stat reporting\n  if (process.env.COUNTLY_APP_KEY && process.env.COUNTLY_URL) {\n    logger.info(\n      `Initing countly - ${process.env.COUNTLY_URL} with app key: ${process.env.COUNTLY_APP_KEY}`\n    );\n    Countly.init({\n      app_key: process.env.COUNTLY_APP_KEY,\n      url: process.env.COUNTLY_URL,\n    });\n  }\n\n  logger.info('Boot successful!');\n}\n\nasync function initServer() {\n  const server = express();\n\n  // Setup handlebars\n  server.engine('html', exphbs({ extname: '.html' }));\n  server.set('view engine', 'html');\n  server.set('views', 'src/views'); // relative to process.cwd\n\n  // Parse body\n  server.use(bodyParser.urlencoded({ extended: false }));\n  server.use(bodyParser.json());\n\n  // Serve static files\n  server.use(process.env.BASE_PATH, express.static('src/public')); // relative to process.cwd\n\n  // Setup routes\n  initRoutes(server);\n\n  return new Promise((resolve, reject) => {\n    server.listen(process.env.PORT, (err) => {\n      if (err) return reject(err);\n      logger.info(`Server running on ${process.env.PORT}`);\n      resolve();\n    });\n  });\n}\n\nfunction initRoutes(server: express.Express) {\n  const router = express.Router();\n\n  router.get('/', (req, res, next) => {\n    res.render('index', {\n      layout: false,\n      data: {\n        SLACK_CLIENT_ID: process.env.SLACK_CLIENT_ID,\n        SLACK_SCOPE: process.env.SLACK_SCOPE,\n        SLACK_APP_ID: process.env.SLACK_APP_ID,\n        COUNTLY_URL: process.env.COUNTLY_URL,\n        COUNTLY_APP_KEY: process.env.COUNTLY_APP_KEY,\n      },\n    });\n  });\n\n  router.get('/privacy', (req, res, next) => {\n    res.render('privacy', {\n      layout: false,\n      data: {\n        SLACK_APP_ID: process.env.SLACK_APP_ID,\n        COUNTLY_URL: process.env.COUNTLY_URL,\n        COUNTLY_APP_KEY: process.env.COUNTLY_APP_KEY,\n      },\n    });\n  });\n\n  router.get('/oauth', OAuthRoute.handle);\n  router.post('/slack/pp-command', PPCommandRoute.handle);\n  router.post('/slack/action-endpoint', ActionRoute.handle);\n\n  router.get('/slack/direct-install', (req, res, next) => {\n    const url = `https://slack.com/oauth/v2/authorize?client_id=${process.env.SLACK_CLIENT_ID}&scope=${process.env.SLACK_SCOPE}`;\n    res.status(302).redirect(url);\n  });\n\n  // Serve under specified base path\n  server.use(`${process.env.BASE_PATH}`, router);\n}\n\nasync function setupTracing() {\n  const traceProvider = new BasicTracerProvider();\n  traceProvider.register();\n\n  if (!process.env.REPORT_TRACES) {\n    return;\n  }\n\n  const exporter = new JaegerExporter({\n    serviceName: 'pp',\n    tags: [],\n    host: process.env.JAEGER_HOST,\n    port: parseInt(process.env.JAEGER_PORT, 10),\n    logger: {\n      debug: (...args: any[]) =>\n        console.debug('[jaeger-exporter][debug]', ...args),\n      info: (...args: any[]) =>\n        console.info('[jaeger-exporter][info]', ...args),\n      warn: (...args: any[]) =>\n        console.warn('[jaeger-exporter][warn]', ...args),\n      error: (...args: any[]) =>\n        console.error('[jaeger-exporter][error]', ...args),\n    },\n  });\n  traceProvider.addSpanProcessor(new BatchSpanProcessor(exporter));\n\n  logger.info(\n    `Traces will be reported to jaeger-agent on ${process.env.JAEGER_HOST}:${process.env.JAEGER_PORT}`\n  );\n}\n\nmain().catch((err) => {\n  logger.error('Could not boot', err);\n  process.exit(1);\n});\n"],"sourceRoot":""}